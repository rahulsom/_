name: Gradle Build
on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        default: '17'
        type: string
      java-distribution:
        description: 'Java distribution to use'
        required: false
        default: 'zulu'
        type: string
      ORG_GRADLE_PROJECT_sonatypeUsername:
        description: 'Sonatype username'
        required: false
        default: 'rahulsom'
        type: string
      DOCKER_USERNAME:
        description: 'Docker username'
        required: false
        default: 'rahulsom'
        type: string
      publish-candidates:
        description: 'Publish Candidates to Sonatype'
        required: false
        default: false
        type: boolean
    secrets:
      DOCKER_PASSWORD:
        description: 'Docker password or token'
        required: false
      ORG_GRADLE_PROJECT_sonatypePassword:
        description: 'Sonatype password'
        required: false
      ORG_GRADLE_PROJECT_signingKey:
        description: 'Signing key'
        required: false
      ORG_GRADLE_PROJECT_signingPassword:
        description: 'Signing password'
        required: false

jobs:
  build:
    name: "Build with Gradle"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7

      - uses: gradle/wrapper-validation-action@v3

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - uses: gradle/gradle-build-action@v3
        name: Setup Gradle

      - name: Build
        id: gradle
        run: ./gradlew build

      - name: Build Snapshot
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        env:
          DOCKER_USERNAME: ${{ inputs.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ inputs.ORG_GRADLE_PROJECT_sonatypeUsername }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_sonatypePassword }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
        run: ./gradlew build snapshot

      - name: Build Candidate
        if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc') && github.event.inputs.publish-candidates
        env:
          DOCKER_USERNAME: ${{ inputs.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          ORG_GRADLE_PROJECT_sonatypeUsername: rahulsom
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_sonatypePassword }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
        run: ./gradlew -Prelease.useLastTag=true build candidate

      - name: Build Final
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
        env:
          DOCKER_USERNAME: ${{ inputs.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          ORG_GRADLE_PROJECT_sonatypeUsername: rahulsom
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_sonatypePassword }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
        run: ./gradlew -Prelease.useLastTag=true build final

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit

      - name: "Add build scan URL as PR comment"
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå ${{ github.workflow }} failed: ${{ steps.gradle.outputs.build-scan-url }}'
            })
